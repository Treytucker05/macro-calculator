{
  "tasks": [
    {
      "name": "weeklyAverage util",
      "file": "js/weeklyAverage.js",
      "prompt": "Create js/weeklyAverage.js with a pure ES module:\nexport function weeklyAverage(weights){ if(!weights.length) return 0; const s=weights.reduce((a,b)=>a+b,0); return Math.round((s/weights.length)*10)/10; }",
      "tests": "node -e \"import('./js/weeklyAverage.js').then(m=>{const w=[200,199,201,200,200,199,200];if(m.weeklyAverage(w)!==199.9)process.exit(1);});\""
    },
    {
      "name": "weightLog helper",
      "file": "js/weightLog.js",
      "prompt": "Create js/weightLog.js with addWeight(dateISO,lbs) + getWeekAverage(weekStartISO) using localStorage key 'weights'. addWeight pushes {d,l}. getWeekAverage averages entries Mon-Sun (same YYYY-WW).",
      "tests": "node -e \"globalThis.localStorage={_:{},setItem(k,v){this._[k]=v},getItem(k){return this._[k]}};import('./js/weightLog.js').then(m=>{m.addWeight('2025-05-26',200);m.addWeight('2025-05-27',199);if(Math.round(m.getWeekAverage('2025-05-26'))!==200)process.exit(1);});\""
    }
  ]
}
    ,
    {
      "name": "adaptiveEngine core",
      "file": "js/adaptiveEngine.js",
      "prompt": "Create js/adaptiveEngine.js as an ES module that exports one function:\\n\\n/**\\n * getDailyAdjustedMacros\\n * @param {number[]} weeklyWeights  – array of last 7 body-weights (lbs)\\n * @param {number} targetChange     – desired lbs per week (neg = lose, pos = gain)\\n * @param {{p:number,c:number,f:number}} macros – current daily macros (grams)\\n * @returns {{p:number,c:number,f:number, kcalAdj:number}}  new macros & kcal delta\\n */\\nimport { weeklyAverage } from './weeklyAverage.js';\\nimport { calorieCorrection } from './calorieCorrection.js';\\nexport function getDailyAdjustedMacros(weeklyWeights, targetChange, macros){\\n  const actualChange = weeklyWeights[0] - weeklyWeights[6];\\n  const kcalAdj = calorieCorrection(targetChange, actualChange);\\n  // adjust carbs first (4 kcal/g), then fats (9 kcal/g)\\n  let remain = kcalAdj;\\n  const newMacros = { ...macros };\\n  // carbs adjustment (max whole grams)\\n  const carbAdj = Math.trunc(remain / 4);\\n  newMacros.c += carbAdj;\\n  remain -= carbAdj * 4;\\n  // fats adjustment for leftover kcal\\n  const fatAdj = Math.trunc(remain / 9);\\n  newMacros.f += fatAdj;\\n  return { ...newMacros, kcalAdj };\\n}",
      "tests": "node -e \"import('./js/adaptiveEngine.js').then(m=>{const w=[200,200,200,199.8,199.6,199.5,199.5];const cur={p:230,c:545,f:120};const res=m.getDailyAdjustedMacros(w,-1,cur);if(!('kcalAdj' in res))process.exit(1);});\""
    }

,
    {
      "name": "noop",
      "file": "noop.txt",
      "prompt": "Create noop.txt that just contains the word ok",
      "tests": "echo ok"
    }
,
{
  "name": "validateMacros util",
  "file": "js/validateMacros.js",
  "prompt": "Create js/validateMacros.js with one function:\nexport function validateMacros(macros,bw){\n  /* macros={p,c,f}; bw=body-weight in lbs */\n  const errors=[];\n  if(macros.p < bw*0.8) errors.push('Protein below 0.8 g/lb');\n  if(macros.f < bw*0.3) errors.push('Fat below 0.3 g/lb');\n  return errors;\n}",
  "tests": "node -e \"import('./js/validateMacros.js').then(m=>{const e=m.validateMacros({p:100,c:300,f:30},200);if(e.length!==2)process.exit(1);});\""
}
